-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsLanguage where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data LValue = LValueVar Ident | LValueMemb LValue Ident
  deriving (Eq, Ord, Show, Read)

data Expr
    = EPlus Expr Expr
    | EMinus Expr Expr
    | ECat Expr Expr
    | ETimes Expr Expr
    | EDiv Expr Expr
    | EPow Expr Expr
    | EEq Expr Expr
    | ENeq Expr Expr
    | EGeq Expr Expr
    | ELeq Expr Expr
    | EGt Expr Expr
    | ELt Expr Expr
    | ELor Expr Expr
    | ELand Expr Expr
    | EXor Expr Expr
    | EFnCall Ident InvokeExprList
    | EIife FunDecl InvokeExprList
    | ELValue LValue
    | EString String
    | EInt Integer
    | EBool Boolean
  deriving (Eq, Ord, Show, Read)

data ExprOrTuple = EOTRegular Expr | EOTTuple [Expr]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SIf Expr Stmt
    | SIfElse Expr Stmt Stmt
    | SFor Ident Expr Expr Stmt
    | SWhile Expr Stmt
    | SExpr Expr
    | SVDecl VarDecl
    | SFDecl Ident FunDecl
    | SSDecl Ident StrcDecl
    | STDecl TupleTarget ExprOrTuple
    | SAssign LValue Expr
    | STAssign TupleTarget ExprOrTuple
    | SIgnore ExprOrTuple
    | SReturn ReturnExpr
    | SBreak
    | SCont
    | SBlock Bind [Stmt]
  deriving (Eq, Ord, Show, Read)

data TupleTarget = TTar [IdentOrIgnr]
  deriving (Eq, Ord, Show, Read)

data IdentOrIgnr = IOIIdent Ident | IOIIgnore
  deriving (Eq, Ord, Show, Read)

data VarDecl
    = DVDecl Ident Type
    | DVDeclAsgn Ident Type Expr
    | DVDeclDeduce Ident Expr
  deriving (Eq, Ord, Show, Read)

data StrcDecl = SDDefault StrcMembers
  deriving (Eq, Ord, Show, Read)

data StrcMembers = SMDefault [DeclStrcMember] | SMEmpty
  deriving (Eq, Ord, Show, Read)

data DeclStrcMember = DStrMem Ident Type
  deriving (Eq, Ord, Show, Read)

data FunDecl = FDDefault FunParams Bind FuncRetT [Stmt]
  deriving (Eq, Ord, Show, Read)

data Bind = BdDefault [Ident] | BdPure | BdPureAlt | BdNone
  deriving (Eq, Ord, Show, Read)

data InvokeExprList = IELDefault [Expr] | IELEmpty
  deriving (Eq, Ord, Show, Read)

data DeclFunParam = DDeclBasic Ident Type
  deriving (Eq, Ord, Show, Read)

data ReturnExpr = RExNone | RExRegular ExprOrTuple
  deriving (Eq, Ord, Show, Read)

data FunParams = FPList [DeclFunParam] | FPEmpty
  deriving (Eq, Ord, Show, Read)

data FuncRetT = FRTSingle Type | FRTTuple [Type] | FRTEmpty
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TBool | TString | TUser Ident
  deriving (Eq, Ord, Show, Read)

data Boolean = BTrue | BFalse
  deriving (Eq, Ord, Show, Read)

