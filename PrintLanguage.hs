{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintLanguage where

-- pretty-printer generated by the BNF converter

import AbsLanguage
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print (Program a) where
  prt i e = case e of
    Prog _ stmts -> prPrec i 0 (concatD [prt 0 stmts])

instance Print (LValue a) where
  prt i e = case e of
    LValueVar _ id -> prPrec i 0 (concatD [prt 0 id])
    LValueMemb _ lvalue id -> prPrec i 0 (concatD [prt 0 lvalue, doc (showString "."), prt 0 id])

instance Print (Expr a) where
  prt i e = case e of
    EPlus _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "+"), prt 2 expr2])
    EMinus _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "-"), prt 2 expr2])
    ECat _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "@"), prt 2 expr2])
    ETimes _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "*"), prt 3 expr2])
    EDiv _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "/"), prt 3 expr2])
    EPow _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "^"), prt 4 expr2])
    EEq _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "=="), prt 5 expr2])
    ENeq _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "!="), prt 5 expr2])
    EGeq _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString ">="), prt 5 expr2])
    ELeq _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "<="), prt 5 expr2])
    EGt _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString ">"), prt 5 expr2])
    ELt _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "<"), prt 5 expr2])
    ELor _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "||"), prt 6 expr2])
    ELand _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "&&"), prt 6 expr2])
    EXor _ expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "^^"), prt 6 expr2])
    EFnCall _ id invokeexprlist -> prPrec i 6 (concatD [prt 0 id, prt 0 invokeexprlist])
    EIife _ fundecl invokeexprlist -> prPrec i 6 (concatD [prt 0 fundecl, prt 0 invokeexprlist])
    ELValue _ lvalue -> prPrec i 7 (concatD [prt 0 lvalue])
    EString _ str -> prPrec i 8 (concatD [prt 0 str])
    EInt _ n -> prPrec i 8 (concatD [prt 0 n])
    EBool _ boolean -> prPrec i 8 (concatD [prt 0 boolean])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (ExprOrTuple a) where
  prt i e = case e of
    EOTRegular _ expr -> prPrec i 0 (concatD [prt 0 expr])
    EOTTuple _ exprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])

instance Print (Stmt a) where
  prt i e = case e of
    SIf _ expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    SIfElse _ expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 1 stmt1, doc (showString "else"), prt 0 stmt2])
    SFor _ id expr1 expr2 stmt -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 id, doc (showString ":"), prt 0 expr1, doc (showString ".."), prt 0 expr2, doc (showString ")"), prt 0 stmt])
    SWhile _ expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    SExpr _ expr -> prPrec i 1 (concatD [prt 0 expr, doc (showString ";")])
    SVDecl _ vardecl -> prPrec i 1 (concatD [prt 0 vardecl, doc (showString ";")])
    SFDecl _ id fundecl -> prPrec i 1 (concatD [prt 0 id, doc (showString "::"), prt 0 fundecl])
    SSDecl _ id strcdecl -> prPrec i 1 (concatD [prt 0 id, doc (showString "::"), prt 0 strcdecl])
    STDecl _ tupletarget exprortuple -> prPrec i 1 (concatD [prt 0 tupletarget, doc (showString ":"), doc (showString "="), prt 0 exprortuple, doc (showString ";")])
    SAssign _ lvalue expr -> prPrec i 1 (concatD [prt 0 lvalue, doc (showString "="), prt 0 expr, doc (showString ";")])
    STAssign _ tupletarget exprortuple -> prPrec i 1 (concatD [prt 0 tupletarget, doc (showString "="), prt 0 exprortuple, doc (showString ";")])
    SIgnore _ exprortuple -> prPrec i 1 (concatD [doc (showString "_"), doc (showString "="), prt 0 exprortuple, doc (showString ";")])
    SReturn _ returnexpr -> prPrec i 1 (concatD [doc (showString "return"), prt 0 returnexpr, doc (showString ";")])
    SBreak _ -> prPrec i 1 (concatD [doc (showString "break"), doc (showString ";")])
    SCont _ -> prPrec i 1 (concatD [doc (showString "continue"), doc (showString ";")])
    SBlock _ bind stmts -> prPrec i 1 (concatD [prt 0 bind, doc (showString "{"), prt 0 stmts, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (TupleTarget a) where
  prt i e = case e of
    TTar _ identorignrs -> prPrec i 0 (concatD [doc (showString "["), prt 0 identorignrs, doc (showString "]")])

instance Print (IdentOrIgnr a) where
  prt i e = case e of
    IOIIdent _ id -> prPrec i 0 (concatD [prt 0 id])
    IOIIgnore _ -> prPrec i 0 (concatD [doc (showString "_")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (VarDecl a) where
  prt i e = case e of
    DVDecl _ id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    DVDeclAsgn _ id type_ expr -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 expr])
    DVDeclDeduce _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), doc (showString "="), prt 0 expr])

instance Print (StrcDecl a) where
  prt i e = case e of
    SDDefault _ strcmembers -> prPrec i 0 (concatD [doc (showString "struct"), doc (showString "{"), prt 0 strcmembers, doc (showString "}")])

instance Print (StrcMembers a) where
  prt i e = case e of
    SMDefault _ declstrcmembers -> prPrec i 0 (concatD [prt 0 declstrcmembers])
    SMEmpty _ -> prPrec i 0 (concatD [])

instance Print (DeclStrcMember a) where
  prt i e = case e of
    DStrMem _ id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (FunDecl a) where
  prt i e = case e of
    FDDefault _ funparams bind funcrett stmts -> prPrec i 0 (concatD [prt 0 funparams, prt 0 bind, prt 0 funcrett, doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Bind a) where
  prt i e = case e of
    BdDefault _ ids -> prPrec i 0 (concatD [doc (showString "!"), doc (showString "("), prt 0 ids, doc (showString ")")])
    BdPure _ -> prPrec i 0 (concatD [doc (showString "!"), doc (showString "("), doc (showString ")")])
    BdPureAlt _ -> prPrec i 0 (concatD [doc (showString "!")])
    BdNone _ -> prPrec i 0 (concatD [])

instance Print (InvokeExprList a) where
  prt i e = case e of
    IELDefault _ exprs -> prPrec i 0 (concatD [doc (showString "("), prt 0 exprs, doc (showString ")")])
    IELEmpty _ -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])

instance Print (DeclFunParam a) where
  prt i e = case e of
    DDeclBasic _ id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (ReturnExpr a) where
  prt i e = case e of
    RExNone _ -> prPrec i 0 (concatD [])
    RExRegular _ exprortuple -> prPrec i 0 (concatD [prt 0 exprortuple])

instance Print (FunParams a) where
  prt i e = case e of
    FPList _ declfunparams -> prPrec i 0 (concatD [doc (showString "("), prt 0 declfunparams, doc (showString ")")])
    FPEmpty _ -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])

instance Print (FuncRetT a) where
  prt i e = case e of
    FRTSingle _ type_ -> prPrec i 0 (concatD [doc (showString "->"), prt 0 type_])
    FRTTuple _ types -> prPrec i 0 (concatD [doc (showString "->"), doc (showString "["), prt 0 types, doc (showString "]")])
    FRTEmpty _ -> prPrec i 0 (concatD [])

instance Print (Type a) where
  prt i e = case e of
    TInt _ -> prPrec i 0 (concatD [doc (showString "int")])
    TBool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    TString _ -> prPrec i 0 (concatD [doc (showString "string")])
    TUser _ id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Boolean a) where
  prt i e = case e of
    BTrue _ -> prPrec i 0 (concatD [doc (showString "true")])
    BFalse _ -> prPrec i 0 (concatD [doc (showString "false")])


