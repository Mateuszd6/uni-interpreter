-- automatically generated by BNF Converter
module Main where

import System.IO ( )
import System.Environment ( getArgs )
import System.Exit ( exitFailure, exitSuccess )

import LexLanguage
import ParLanguage as Par
import PrintLanguage
import AbsLanguage as Abs

import ErrM

type ParseFun a = [Token] -> Err a

type ParsingPos = Maybe (Int, Int)
showLinCol (Just (line, col)) = line ++ ":" ++ col -- TODO
showLinCol Nothing = ""

parseProg :: [Token] -> Err (Abs.Program ParsingPos)
parseProg = Par.pProgram

lexProg :: String -> [Token]
lexProg = Par.myLexer

runFile :: ParseFun (Program ParsingPos) -> FilePath -> IO ()
runFile p f = putStrLn f >> readFile f >>= run p

toListOfStmts :: Program a -> [Stmt a]
toListOfStmts (Prog _ statements) = statements

run :: Show a => ParseFun (Program a) -> String -> IO ()
run p s = let ts = lexProg s in case p ts of
           Bad errMsg -> do
             putStrLn "\nParse              Failed...\n"
             putStrLn "Tokens:"
             putStrLn $ show ts
             putStrLn $ "Message: " ++ errMsg
             exitFailure
           Ok tree -> do
             putStrLn "\nParse Successful!"
             showTree tree
             putStrLn $ "\npos: " ++ (show tree) ++ "\n"
             putStrLn $ "\nNum statements: " ++ (show $ length $ toListOfStmts tree) ++ "\n"
             exitSuccess


showTree :: Show a => Program a -> IO ()
showTree tree
 = do
      putStrLn $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrLn $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= run parseProg
    "-s":fs -> mapM_ (runFile parseProg) fs
    fs -> mapM_ (runFile parseProg) fs
