entrypoints Program ;
Prog.       Program ::= [Stmt] ;

-- This makes parsing much easier and enforces that ugly things like (1 + 2).foo
-- won't parse. Our language is simple enough that it makes sense; no lists,
-- records just strings so the only thing we would like to have on the LHS when
-- e.g. assigning, is either an existing variable name, or its member.
LValueVar.  LValue ::= Ident ;
LValueMemb. LValue ::= LValue "." Ident ;

ELor.    Expr ::= Expr "||" Expr1 ;
ELand.   Expr ::= Expr "&&" Expr1 ;
EXor.    Expr ::= Expr "^^" Expr1 ;

EEq.     Expr1 ::= Expr1 "==" Expr2 ;
ENeq.    Expr1 ::= Expr1 "!=" Expr2 ;
EGeq.    Expr1 ::= Expr1 ">=" Expr2 ;
ELeq.    Expr1 ::= Expr1 "<=" Expr2 ;
EGt.     Expr1 ::= Expr1 ">" Expr2 ;
ELt.     Expr1 ::= Expr1 "<" Expr2 ;

EPlus.   Expr2 ::= Expr2 "+" Expr3 ;
EMinus.  Expr2 ::= Expr2 "-" Expr3 ;
ECat.    Expr2 ::= Expr2 "@" Expr3 ;

ETimes.  Expr3 ::= Expr3 "*" Expr4 ;
EDiv.    Expr3 ::= Expr3 "/" Expr4 ;
EMod.    Expr3 ::= Expr3 "%" Expr4 ;

EPow.    Expr4 ::= Expr4 "^" Expr5 ;

EFnCall. Expr6 ::= Ident InvokeExprList ;
EScan.   Expr6 ::= "scan" "(" [Type] ")" ;
EIife.   Expr6 ::= FunDecl InvokeExprList ; -- IIFE (more in docs).

ELValue. Expr7 ::= LValue ;
ENew.    Expr7 ::= "new" Ident "{" AsgnFields "}" ;

EString. Expr8 ::= String ;
EInt.    Expr8 ::= Integer ;
EBool.   Expr8 ::= Boolean ;

coercions Expr 8 ;

(:[]).   [Expr] ::= Expr ;
(:).     [Expr] ::= Expr "," [Expr] ;

AFEmpty.   AsgnFields ::= ;
AFList.    AsgnFields ::= [NewFieldAsgn] ;

NFADefault. NewFieldAsgn ::= Ident "=" Expr ;
(:[]).  [NewFieldAsgn] ::= NewFieldAsgn;
(:).    [NewFieldAsgn] ::= NewFieldAsgn "," [NewFieldAsgn] ;

-- Tuple is not a stand-alone expression (more in docs).
EOTRegular. ExprOrTuple ::= Expr ;
EOTTuple.   ExprOrTuple ::= "[" [Expr] "]";

-- Split into Stmt1 and Stmt to avoid confilits around if/else. Using
-- Stmt1 in the middle of else if gives us determinism.
SIf.     Stmt  ::= "if" "(" Expr ")" Stmt ;
SIfElse. Stmt  ::= "if" "(" Expr ")" Stmt1 "else" Stmt ;
SFor.    Stmt  ::= "for" "(" Ident ":" Expr ".." Expr ")" Stmt ; -- Declare new var.
SWhile.  Stmt  ::= "while" "(" Expr ")" Stmt ;
SExpr.   Stmt1 ::= Expr ";" ;
SVDecl.  Stmt1 ::= VarDecl ";" ;
SFDecl.  Stmt1 ::= Ident "::" FunDecl ;
SSDecl.  Stmt1 ::= Ident "::" StrcDecl ;
STDecl.  Stmt1 ::= TupleTarget ":" "=" ExprOrTuple ";" ; -- Declare new vars (types are deduced)
SAssign. Stmt1 ::= LValue "=" Expr ";" ;
STAssign.Stmt1 ::= TupleTarget "=" ExprOrTuple ";" ; -- Tie existing variables.
SIgnore. Stmt1 ::= "_" "=" ExprOrTuple ";" ; -- Not usefull, but would be weird if it didn't parse
SReturn. Stmt1 ::= "return" ReturnExpr ";" ;
SBreak.  Stmt1 ::= "break" ";" ;
SCont.   Stmt1 ::= "continue" ";" ;
SAssert. Stmt1 ::= "assert" ":" Expr ";" ;
SPrint.  Stmt1 ::= "print" "(" [Expr] ")" ";" ;
SBlock.  Stmt1 ::= Bind "{" [Stmt] "}" ;
_.       Stmt1 ::= Stmt1 ";" ; -- Accept trailing semicolons.
_.       Stmt  ::= Stmt1 ;

[].     [Stmt] ::= ;
(:).    [Stmt] ::= Stmt [Stmt] ;

-- Tuple Tie (STAssign) could actually have LValues, not only Idents like:
-- '[foo.x, foo.y] = funcitonThatReturnsAPair();' but I don't like the
-- idea fundamentally. Also it could generate some ugly conflicts, so
-- I've decided to keep it simple.

TTar. TupleTarget ::= "[" [IdentOrIgnr] "]" ;

IOIIdent.  IdentOrIgnr ::= Ident ;
IOIIgnore. IdentOrIgnr ::= "_" ;
(:[]).   [IdentOrIgnr] ::= IdentOrIgnr ;
(:).     [IdentOrIgnr] ::= IdentOrIgnr "," [IdentOrIgnr] ;

DVDecl.       VarDecl ::= Ident VarSpec ":" Type ; -- Declare do not assign value.
DVDeclAsgn.   VarDecl ::= Ident VarSpec ":" Type "=" Expr ; -- Decalre + assign, type is explicit.
DVDeclDeduce. VarDecl ::= Ident VarSpec ":" "=" Expr ; -- Decalre + assign, type is deduced.

VSReadOnly.   VarSpec ::= "!" ;
VSNone.       VarSpec ::= ;

SDDefault. StrcDecl ::= "struct" "{" StrcMembers "}" ;

SMDefault. StrcMembers ::= [DeclStrcMember] ;
SMEmpty.   StrcMembers ::= ; -- To allow empty structs.

DStrMem. DeclStrcMember  ::= Ident ":" Type ;
(:[]).  [DeclStrcMember] ::= DeclStrcMember ";" ;
(:).    [DeclStrcMember] ::= DeclStrcMember ";" [DeclStrcMember] ;

FDDefault. FunDecl ::= FunParams Bind FuncRetT "{" [Stmt] "}" ;

BdDefault. Bind ::= "!" "(" [Ident] ")";
BdPure.    Bind ::= "!" "(" ")" ; -- !() means that function is pure.
BdPureAlt. Bind ::= "!" ; -- user is allowed to skip paren here
BdNone.    Bind ::= ; -- No 'bind' means the function can refer to any scope.

IELDefault. InvokeExprList ::= "(" [Expr] ")" ;
IELEmpty.   InvokeExprList ::= "(" ")" ;

DDeclBasic. DeclFunParam  ::= Ident VarSpec ":" Type ;
(:[]).     [DeclFunParam] ::= DeclFunParam ;
(:).       [DeclFunParam] ::= DeclFunParam "," [DeclFunParam] ;

RExNone.    ReturnExpr ::= ; -- Allowed for void functions.
RExRegular. ReturnExpr ::= ExprOrTuple ;

FPList.  FunParams ::= "(" [DeclFunParam] ")" ;
FPEmpty. FunParams ::= "(" ")" ;

-- Function return type.
FRTSingle. FuncRetT ::= "->" Type ;
FRTTuple.  FuncRetT ::= "->" "[" [Type] "]" ; -- Tuple (No nesting tuples).
FRTEmpty.  FuncRetT ::= ; -- User is allowed to skip -> when no return type.

TInt.     Type ::= "int" ;
TBool.    Type ::= "bool" ;
TString.  Type ::= "string" ;
TUser.    Type ::= Ident ;

(:[]).   [Type]  ::= Type ;
(:).     [Type]  ::= Type "," [Type] ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

BTrue.   Boolean ::= "true" ;
BFalse.  Boolean ::= "false" ;

comment "//" ; -- Regular C style comments both block and single-line.
comment "/*" "*/" ; -- Block comments can't be nested (like in C).
comment "#" ; -- To allow scripting
