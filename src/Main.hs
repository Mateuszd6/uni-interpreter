-- automatically generated by BNF Converter
module Main where

import System.IO ()
import System.Environment (getArgs)
import System.Exit (exitFailure, exitSuccess)
-- import Control.Monad

import qualified ParLanguage as Par
import LexLanguage (Token)
import AbsLanguage as Abs -- TODO: Qualify
-- import PrintLanguage

import ErrM

type ParsingPos = Maybe (Int, Int)
showLinCol :: ParsingPos -> String
showLinCol (Just (line, col)) = (show line) ++ ":" ++ (show col) -- TODO
showLinCol Nothing = ""

parseProg :: [Token] -> Err (Program ParsingPos)
parseProg = Par.pProgram

lexProg :: String -> [Token]
lexProg = Par.myLexer

runFile :: FilePath -> IO ()
runFile f = putStrLn f >> readFile f >>= run

getPos :: Stmt ParsingPos -> Maybe (Int, Int)
getPos (SIf pos _ _) = pos
getPos (SIfElse pos _ _ _) = pos
getPos (SFor pos _ _ _ _) = pos
getPos (SWhile pos _ _) = pos
getPos (SExpr pos _) = pos
getPos (SVDecl pos _) = pos
getPos (SFDecl pos _ _) = pos
getPos (SSDecl pos _ _) = pos
getPos (STDecl pos _ _) = pos
getPos (SAssign pos _  _) = pos
getPos (STAssign pos _ _) = pos
getPos (SIgnore pos _) = pos
getPos (SReturn pos _) = pos
getPos (SBreak pos) = pos
getPos (SCont pos) = pos
getPos (SBlock pos _ _) = pos

toListOfStmts :: Program a -> [Stmt a]
toListOfStmts (Prog _ statements) = statements

-- TODO: Move dump functions to separate file and move nTabs and indent funcs outside?
data DumpState = DumpState
  {
    indent :: Int,
    opened :: [Int]
  }

dumpStateInitial :: DumpState
dumpStateInitial = DumpState 0 []

astDumpIdent :: DumpState -> Ident -> String
astDumpIdent state@(DumpState tabs opened) (Ident str) =
  indent ++ "[\"" ++ str ++ "\"]\n"
  where
    advState :: DumpState
    advState = state{ indent = tabs + 1, opened = tabs : opened }

    advState' :: DumpState
    advState' = state{ indent = tabs + 1, opened = opened }

    indentImpl :: Int -> String
    indentImpl i = (foldr (\i acc-> (if i `mod` 4 == 0 && (elem (i `div` 4) opened)
                                     then '|' else ' '): acc)
                     "" [0 .. (4 * (i - 1) - 1)])
                   ++ (if i > 0 then branchCh ++ "───" else "")

    indent :: String
    indent = indentImpl tabs

    indent' :: String
    indent' = indentImpl $ tabs + 1

    branchCh :: String
    branchCh = if elem (tabs - 1) opened then "├" else "└"

    nl :: String
    nl = "\n"

    fileLinum :: ParsingPos -> String
    fileLinum pPos = " ./tests.txt:" ++ showLinCol pPos

astDumpExpr :: DumpState -> Expr ParsingPos -> String
astDumpExpr state@(DumpState tabs opened) expr = case expr of
  _ -> indent ++ "[unknown expression]\n"
  where
    advState :: DumpState
    advState = state{ indent = tabs + 1, opened = tabs : opened }

    advState' :: DumpState
    advState' = state{ indent = tabs + 1, opened = opened }

    indentImpl :: Int -> String
    indentImpl i = (foldr (\i acc-> (if i `mod` 4 == 0 && (elem (i `div` 4) opened)
                                     then '|'
                                     else ' '): acc)
                     "" [0 .. (4 * (i - 1) - 1)])
                   ++ (if i > 0 then branchCh ++ "───" else "")

    indent :: String
    indent = indentImpl tabs

    indent' :: String
    indent' = indentImpl $ tabs + 1

    branchCh :: String
    branchCh = if elem (tabs - 1) opened then "├" else "└"

    nl :: String
    nl = "\n"

    fileLinum :: ParsingPos -> String
    fileLinum pPos = " ./tests.txt:" ++ showLinCol pPos

astDumpStmt :: DumpState -> Stmt ParsingPos -> String
astDumpStmt state@(DumpState tabs opened) stmt = case stmt of
  SIf pPos cExpr cStmt ->
    indent ++ "[IF]" ++ (fileLinum pPos) ++ nl ++
    astDumpExpr advState cExpr ++
    astDumpStmt advState' cStmt
  SIfElse pPos cExpr cStmt lStmt ->
    indent ++ "[IF-ELSE]" ++ (fileLinum pPos) ++ nl ++
    astDumpExpr advState cExpr ++
    astDumpStmt advState cStmt ++
    astDumpStmt advState' lStmt
  SFor pPos varName bExpr eExpr lstmt ->
    indent ++ "[FOR]" ++ (fileLinum pPos) ++ nl ++
    astDumpIdent advState varName ++
    astDumpExpr advState bExpr ++
    astDumpExpr advState eExpr ++
    astDumpStmt advState' lstmt
  SWhile pPos cExpr lstmt ->
    indent ++ "[WHILE]" ++ (fileLinum pPos) ++ nl ++
    astDumpExpr advState cExpr ++
    astDumpStmt advState' lstmt
  SExpr pPos expr ->
    indent ++ "[EXPR]" ++ (fileLinum pPos) ++ nl ++
    astDumpExpr advState' expr
  SVDecl pPos varDecl -> indent ++ "TODO\n"
  SFDecl pPos name funDecl -> indent ++ "TODO\n"
  SSDecl pPos name strcDecl -> indent ++ "TODO\n"
  STDecl pPos tupleTarget exprOrTuple -> indent ++ "TODO\n"
  _ -> indent ++ "[unknown statement]\n"
  where
    advState :: DumpState
    advState = state{ indent = tabs + 1, opened = tabs : opened }

    advState' :: DumpState
    advState' = state{ indent = tabs + 1, opened = opened }

    indentImpl :: Int -> String
    indentImpl i = (foldr (\i acc-> (if i `mod` 4 == 0 && (elem (i `div` 4) opened)
                                     then '|'
                                     else ' '): acc)
                     "" [0 .. (4 * (i - 1) - 1)])
                   ++ (if i > 0 then branchCh ++ "───" else "")

    indent :: String
    indent = indentImpl tabs

    indent' :: String
    indent' = indentImpl $ tabs + 1

    branchCh :: String
    branchCh = if elem (tabs - 1) opened then "├" else "└"

    nl :: String
    nl = "\n"

    fileLinum :: ParsingPos -> String
    fileLinum pPos = " ./tests.txt:" ++ showLinCol pPos

evalStmt :: Stmt ParsingPos -> IO ()
evalStmt stmt = putStrLn $ "tests.txt:" ++ (showLinCol $ getPos stmt) ++ " evaluating statement."

run :: String -> IO ()
run s = let ts = lexProg s in case parseProg ts of
           Bad errMsg -> do
             putStrLn "\nParse              Failed...\n"
             putStrLn "Tokens:"
             putStrLn $ show ts
             putStrLn $ "Message: " ++ errMsg
             exitFailure
           Ok tree -> do
             putStrLn "Parse Successful!"
             -- showTree tree
             -- putStrLn $ "\npos: " ++ (show tree)
             putStrLn $ "\nNum statements: " ++ (show $ length $ toListOfStmts tree)
             putStr $ foldr (++) "" $ map (astDumpStmt dumpStateInitial) (toListOfStmts tree)
             -- forM_ (toListOfStmts tree) evalStmt
             exitSuccess


showTree :: Show a => Program a -> IO ()
showTree tree
 = do
      putStrLn $ "\n[Abstract Syntax]\n\n" ++ show tree
      -- putStrLn $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= run
    "-s":fs -> mapM_ runFile fs
    fs -> mapM_ runFile fs
