-- | This files combines all bnfc + Alex + Happy generated files and provides
-- minimal interface so that machine generated files don't have to be included
-- in the main program.
module Parser (parseProgram, PPos, Token) where

import Error

-- Auto-generated files:
import ParLanguage (pProgram, myLexer)
import LexLanguage (Token)
import AbsLanguage
import qualified ErrM

-- TODO: describe that it is a parsing position.
type PPos = Maybe (Int, Int)

-- Do lexing, then parsing. Lexing can't fail and by combing these functions we
-- don't have to include LexLanguage in this file. Instead of using ErrM
-- generated by bnfc convert result to our Error class, which is used to store
-- much detailed error desription for any kind of error across the program.
parseProgram :: String -> Error (Program PPos)
parseProgram = convertToError . pProgram . myLexer
  where
    convertToError :: ErrM.Err a -> Error a
    convertToError (ErrM.Ok x) = Ok x
    convertToError (ErrM.Bad reason) = Fail $ ParsingError reason
